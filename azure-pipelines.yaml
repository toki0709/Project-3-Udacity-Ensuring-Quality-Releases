name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDdBpKgatWFZ48d4cnUhMt8qD45pljqmS1qlPikC2A+u+hlQf+pOtUUdrrtmbKWVXzUFLFYqKM9msiIKtuoZnbQj6wyi8cD9CwyNKuUGuD6kvwQrMmfwIuIrtx1wrRQe6MmEDUGmQio0xSrjOSNmAQhxfIqhqhHyFXE6dL46zjVgJHV5xjFAeMwaS2jbTRk08vBWuwx50kcjF00qDg8w2+UkBcI0nLBJ58nmBSuIUO5VZDwDPqZ5W9De6maRDeBd4j9oNH3mByjzx1E4xeluF5S9I2TniY2aogUTv5SCbVioyLYky9G+DKbwu+6L3n3yX4LC/QYWn51FNttD+wmwJ+mvslUKJyZjS4lvT+ktiaIF4elEwInwjk5L9EkThf8ZaYbSuPuwD31sFvxl6vjrp3AluCgtqs4BCmBPDfUhtE7qX6PmCNzuEBpER3fl7ObxW6VLuYZb6M7MLD32K/qs5lEhRaS2k1r/BltzgxS/RJwJa3unLeI7bbuerlSNPvGYgM= tokitazwar71@gmail.com'
        sshKeySecureFile: 'tf_3'

    - task: TerraformTaskV3@3
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'Azure for Students(7cb082a6-6105-42a2-a09c-90c88cc9a56d)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate1701416961'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'prod.terraform.tfstate'
    - task: TerraformTaskV3@3
      displayName: Terraform Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV3@3
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        # commandOptions: 'force-unlock -force a874a865-d586-bb2b-7452-bd397558c47c'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'Azure for Students(2)(7cb082a6-6105-42a2-a09c-90c88cc9a56d)'
    - task: TerraformTaskV3@3
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'Azure for Students(3)(7cb082a6-6105-42a2-a09c-90c88cc9a56d)'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Selenium'
      inputs:
        rootFolderOrFile: 'automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Selenium.zip'
        replaceExistingArchive: true
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Selenium.zip'
      artifact: drop-Selenium

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-22.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              inputs:
                azureSubscription: 'Azure for Students(4)(7cb082a6-6105-42a2-a09c-90c88cc9a56d)'
                appType: 'webApp'
                appName: 'automate-app-test-azure-project-AppService'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'
  
  
  # - deployment: Deploy
  #   displayName: UI TEST
  #   pool:
  #     vmImage: 'ubuntu-22.04'
  #   environment:
  #     name:  Test
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
  
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
                
  #               wget https://chromedriver.storage.googleapis.com/index.html?path=105.0.5195.52/chromedriver_linux64.zip
  #               unzip chromedriver_linux64.zip
  #               sudo mv chromedriver /usr/bin/chromedriver
  #               sudo chown root:root /usr/bin/chromedriver
  #               sudo chmod +x /usr/bin/chromedriver
                
  #               sudo python3 -m pip install -U selenium
  #               export PATH=$PATH:'pwd'


  #         - download: current
  #           displayName: 'Download Selenium'
  #           artifact: drop-Selenium
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #                 unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
  #                 sudo mkdir /var/logs
  #                 python3 login.py > uitest.log
  #                 sudo mv uitest.log /var/logs

- stage: Tests
  jobs:

  - job: Integration
    displayName: 'Integration Tests'
    pool:
      vmImage: ubuntu-22.04
    steps:

    - task: Bash@3
      displayName: 'Install Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          pwd
          sudo snap install postman
          sudo npm install -g newman
          sudo npm install newman-reporter-junitfull -g      

    # - task: Bash@3
    #   displayName: 'Regression Tests'
    #   inputs:
    #     workingDirectory: 'automatedtesting/postman'
    #     targetType: 'inline'
    #     script: |
    #       #! /bin/bash

    #       newman run Regression_Test.json \
    #         -e Project-3-ENV.json \
    #         -r cli,junitfull \
    #         --reporter-junitfull-export JUnitReportRegression.xml
    
    - task: CmdLine@2
      displayName: Run Regression Tests
      inputs:
          script: 'newman run postman/Regression_Test.json -e postman/ Project-3-ENV.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code'
      workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      continueOnError: true

    - task: CmdLine@2
      displayName: Run Data Validation Tests
      inputs:
        script: 'newman run postman/Data_Validation.json -e postman/ Project-3-ENV.json .json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml --suppress-exit-code'
      workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      continueOnError: true



    # - task: CmdLine@2
    #   displayName: 'Data Validation Tests'
    #   inputs:
    #     workingDirectory: 'automatedtesting/postman'
    #     targetType: 'inline'
    #     script: |
    #       #! /bin/bash

    #       newman run Validation_Test.json \
    #         -e Project-3-ENV.json \
    #         -r cli,junitfull \
    #         --reporter-junitfull-export JUnitReportValidation.xml

    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '**/JUnitReport*.xml'
    #     testRunTitle: 'Publish test results'
    #     searchFolder: 'automatedtesting/postman'





